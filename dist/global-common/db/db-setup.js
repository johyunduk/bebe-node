"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectDb = connectDb;
exports.updateQuery = exports.selectQuery = exports.getDB = void 0;
var _path = _interopRequireDefault(require("path"));
var _sequelize = require("sequelize");
var _commonDbSetup = require("@global-common/db/common-db-setup");
var _env = require("@global-common/constants/env");
var _logger = require("@global-common/utils/logger");
var _common = require("@global-common/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const logger = (0, _logger.getLogger)('db-setup.ts');
const {
  NODE_ENV,
  BEBE_DB_URL,
  BEBE_DB_NAME
} = _env.commonEnv;
async function connectDb() {
  if (NODE_ENV !== _common.PRODUCTION) {
    logger.debug(`db-setup DB_URL: ${BEBE_DB_URL}`);
  }
  const sequelize = await (0, _commonDbSetup.newSequelize)(BEBE_DB_URL);
  (0, _commonDbSetup.setDB)(BEBE_DB_NAME, sequelize);
  await (0, _commonDbSetup.loadAllModel)(_path.default.join(__dirname, '/model/*.js'));
  await (0, _commonDbSetup.ensureDbExistsAndSync)(sequelize, BEBE_DB_URL);
}
const getDB = _commonDbSetup.getDB.bind(null, BEBE_DB_NAME);
exports.getDB = getDB;
const selectQuery = (sql, replacements) => getDB().query(sql, {
  replacements,
  type: _sequelize.QueryTypes.SELECT
});
exports.selectQuery = selectQuery;
const updateQuery = (sql, replacements) => getDB().query(sql, {
  replacements,
  type: _sequelize.QueryTypes.UPDATE
});
exports.updateQuery = updateQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJnZXRMb2dnZXIiLCJOT0RFX0VOViIsIkJFQkVfREJfVVJMIiwiQkVCRV9EQl9OQU1FIiwiY29tbW9uRW52IiwiY29ubmVjdERiIiwiUFJPRFVDVElPTiIsImRlYnVnIiwic2VxdWVsaXplIiwibmV3U2VxdWVsaXplIiwic2V0REIiLCJsb2FkQWxsTW9kZWwiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImVuc3VyZURiRXhpc3RzQW5kU3luYyIsImdldERCIiwiZ2V0RGIiLCJiaW5kIiwic2VsZWN0UXVlcnkiLCJzcWwiLCJyZXBsYWNlbWVudHMiLCJxdWVyeSIsInR5cGUiLCJRdWVyeVR5cGVzIiwiU0VMRUNUIiwidXBkYXRlUXVlcnkiLCJVUERBVEUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2xvYmFsLWNvbW1vbi9kYi9kYi1zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgUXVlcnlUeXBlcyB9IGZyb20gJ3NlcXVlbGl6ZSdcblxuaW1wb3J0IHtcbiAgbG9hZEFsbE1vZGVsLFxuICBnZXREQiBhcyBnZXREYixcbiAgc2V0REIsXG4gIG5ld1NlcXVlbGl6ZSxcbiAgZW5zdXJlRGJFeGlzdHNBbmRTeW5jLFxufSBmcm9tICdAZ2xvYmFsLWNvbW1vbi9kYi9jb21tb24tZGItc2V0dXAnXG5pbXBvcnQgeyBjb21tb25FbnYgfSBmcm9tICdAZ2xvYmFsLWNvbW1vbi9jb25zdGFudHMvZW52J1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnQGdsb2JhbC1jb21tb24vdXRpbHMvbG9nZ2VyJ1xuaW1wb3J0IHsgUFJPRFVDVElPTiB9IGZyb20gJ0BnbG9iYWwtY29tbW9uL2NvbnN0YW50cy9jb21tb24nXG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignZGItc2V0dXAudHMnKVxuXG5jb25zdCB7IE5PREVfRU5WLCBCRUJFX0RCX1VSTCwgQkVCRV9EQl9OQU1FIH0gPSBjb21tb25FbnZcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3REYiAoKSB7XG4gIGlmIChOT0RFX0VOViAhPT0gUFJPRFVDVElPTikge1xuICAgIGxvZ2dlci5kZWJ1ZyhgZGItc2V0dXAgREJfVVJMOiAke0JFQkVfREJfVVJMfWApXG4gIH1cblxuICBjb25zdCBzZXF1ZWxpemUgPSBhd2FpdCBuZXdTZXF1ZWxpemUoQkVCRV9EQl9VUkwpXG4gIHNldERCKEJFQkVfREJfTkFNRSwgc2VxdWVsaXplKVxuICBhd2FpdCBsb2FkQWxsTW9kZWwocGF0aC5qb2luKF9fZGlybmFtZSwgJy9tb2RlbC8qLmpzJykpXG4gIGF3YWl0IGVuc3VyZURiRXhpc3RzQW5kU3luYyhzZXF1ZWxpemUsIEJFQkVfREJfVVJMKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0REIgPSBnZXREYi5iaW5kKG51bGwsIEJFQkVfREJfTkFNRSlcbmV4cG9ydCBjb25zdCBzZWxlY3RRdWVyeSA9IChzcWwsIHJlcGxhY2VtZW50cz8pID0+IGdldERCKCkucXVlcnkoc3FsLCB7IHJlcGxhY2VtZW50cywgdHlwZTogUXVlcnlUeXBlcy5TRUxFQ1QgfSlcbmV4cG9ydCBjb25zdCB1cGRhdGVRdWVyeSA9IChzcWwsIHJlcGxhY2VtZW50cz8pID0+IGdldERCKCkucXVlcnkoc3FsLCB7IHJlcGxhY2VtZW50cywgdHlwZTogUXVlcnlUeXBlcy5VUERBVEUgfSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQU9BO0FBQ0E7QUFDQTtBQUE0RDtBQUU1RCxNQUFNQSxNQUFNLEdBQUcsSUFBQUMsaUJBQVMsRUFBQyxhQUFhLENBQUM7QUFFdkMsTUFBTTtFQUFFQyxRQUFRO0VBQUVDLFdBQVc7RUFBRUM7QUFBYSxDQUFDLEdBQUdDLGNBQVM7QUFFbEQsZUFBZUMsU0FBUyxHQUFJO0VBQ2pDLElBQUlKLFFBQVEsS0FBS0ssa0JBQVUsRUFBRTtJQUMzQlAsTUFBTSxDQUFDUSxLQUFLLENBQUUsb0JBQW1CTCxXQUFZLEVBQUMsQ0FBQztFQUNqRDtFQUVBLE1BQU1NLFNBQVMsR0FBRyxNQUFNLElBQUFDLDJCQUFZLEVBQUNQLFdBQVcsQ0FBQztFQUNqRCxJQUFBUSxvQkFBSyxFQUFDUCxZQUFZLEVBQUVLLFNBQVMsQ0FBQztFQUM5QixNQUFNLElBQUFHLDJCQUFZLEVBQUNDLGFBQUksQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7RUFDdkQsTUFBTSxJQUFBQyxvQ0FBcUIsRUFBQ1AsU0FBUyxFQUFFTixXQUFXLENBQUM7QUFDckQ7QUFFTyxNQUFNYyxLQUFLLEdBQUdDLG9CQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUVmLFlBQVksQ0FBQztBQUFBO0FBQzVDLE1BQU1nQixXQUFXLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFQyxZQUFhLEtBQUtMLEtBQUssRUFBRSxDQUFDTSxLQUFLLENBQUNGLEdBQUcsRUFBRTtFQUFFQyxZQUFZO0VBQUVFLElBQUksRUFBRUMscUJBQVUsQ0FBQ0M7QUFBTyxDQUFDLENBQUM7QUFBQTtBQUN6RyxNQUFNQyxXQUFXLEdBQUcsQ0FBQ04sR0FBRyxFQUFFQyxZQUFhLEtBQUtMLEtBQUssRUFBRSxDQUFDTSxLQUFLLENBQUNGLEdBQUcsRUFBRTtFQUFFQyxZQUFZO0VBQUVFLElBQUksRUFBRUMscUJBQVUsQ0FBQ0c7QUFBTyxDQUFDLENBQUM7QUFBQSJ9