"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = commonRoute;
var _os = _interopRequireDefault(require("os"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _glob = _interopRequireDefault(require("glob"));
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _clsRtracer = _interopRequireDefault(require("cls-rtracer"));
var _gitLastCommit = _interopRequireDefault(require("git-last-commit"));
var _loggingMiddleware = require("./helper/logging-middleware");
var _env = require("../../constants/env");
var _commonUtilRoutes = _interopRequireDefault(require("./common-util-routes"));
var _logger = require("../../utils/logger");
var _fallbackErrorHandler = _interopRequireDefault(require("./helper/fallbackErrorHandler"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const logger = (0, _logger.getLogger)('common-routes.ts');
const hostname = _os.default.hostname();
async function loadRoutes(router, routePathList) {
  logger.warn('loadRoutes routePathList:', routePathList);
  if (!Array.isArray(routePathList)) {
    routePathList = [routePathList];
  }

  // 지정된 routePath의 모든 route를 load해서 세팅함.
  for (const routePath of routePathList) {
    logger.warn('routePath :', routePath);
    for (const file of _glob.default.sync(routePath)) {
      logger.warn('route file :', file);
      const {
        default: route
      } = await (specifier => new Promise(r => r(`${specifier}`)).then(s => _interopRequireWildcard(require(s))))(_path.default.resolve(file));
      router.use(`/${_env.commonEnv.API_VERSION}`, route());
    }
  }
}
async function mainRoute(router, routePathList) {
  if (typeof routePathList === 'function') {
    return routePathList(loadRoutes.bind(null, router));
  }
  await loadRoutes(router, routePathList);
}
async function setLastCommitInfo(router) {
  logger.info('setLastCommitInfo');
  const lastCommitInfo = {
    appVersion: 'should be set',
    shortHash: 'not set!'
  };
  _gitLastCommit.default.getLastCommit(function (err, gitCommitInfo) {
    if (err) {
      logger.warn(err.message);
    }
    lastCommitInfo.appVersion = process.env.npm_package_version;
    if (gitCommitInfo) {
      lastCommitInfo.shortHash = gitCommitInfo.shortHash;
      lastCommitInfo.committedOn = new Date(+gitCommitInfo.committedOn * 1000).toISOString();
    }
    logger.debug(JSON.stringify(lastCommitInfo));
  });
  router.use((req, res, next) => {
    req.lastCommitInfo = lastCommitInfo;
    next();
  });
}
async function setupDefaultHealthCheckInfo(router, serverInfo) {
  function sendServerInfo(req, res) {
    const {
      appVersion,
      shortHash: gitHash,
      committedOn
    } = req.lastCommitInfo;
    res.send({
      ...serverInfo,
      hostname,
      appVersion,
      gitHash,
      committedOn,
      NODE_ENV: _env.commonEnv.NODE_ENV
    });
  }
  router.get('/', sendServerInfo);
  const serviceName = _lodash.default.last(serverInfo.name.split('-'));
  // 예: serverInfo.api = '/api/v1' , serviceName = 'service'

  // 주: ELB 에서 /api/v1/service/* 로 라우팅 하고 있다면 /api/v1/service 이렇게 하면 안걸리고,
  // 마지막 /까지 입력 해야 여기에 걸리게 됨.
  // /api/v1/service/ 이런식으로 url 입력해도 서버 정보 제대로 보여주도록 아래 추가.
  router.get(`${serverInfo.api}/${serverInfo.name}`, sendServerInfo);
}
async function commonRoute({
  router,
  getDB,
  routePath,
  serverInfo
}) {
  logger.info('main setup routes');
  router.use(_bodyParser.default.urlencoded({
    limit: '10mb',
    extended: true
  }));
  router.use(_bodyParser.default.json({
    limit: '10mb'
  }));

  // ignore favicon
  router.get('/favicon.ico', (req, res) => res.status(204));
  await setLastCommitInfo(router);
  router.use(_clsRtracer.default.expressMiddleware());
  !_env.commonEnv.NO_DEFAULT_LOGGER && router.use(_loggingMiddleware.loggingMiddleware);
  (0, _commonUtilRoutes.default)(getDB, router);
  await mainRoute(router, routePath);

  // health check
  setupDefaultHealthCheckInfo(router, serverInfo);
  (0, _fallbackErrorHandler.default)(router);
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,