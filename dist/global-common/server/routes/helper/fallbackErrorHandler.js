"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fallbackErrorHandler;
exports.notFoundErrorHandler = void 0;
var _clsRtracer = _interopRequireDefault(require("cls-rtracer"));
var _exceptionFormatter = _interopRequireDefault(require("exception-formatter"));
var _logger = require("../../../utils/logger");
var _httpError = require("../../../error/http-error");
var _common = require("../../../constants/common");
var _errorMessage = require("@global-common/error/error-message");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const logger = (0, _logger.getLogger)('fallbackErrorHandler.ts');
function fallbackErrorHandler(router) {
  router.use(notFoundErrorHandler);
  router.use(defaultErrHandler);
}
const notFoundErrorHandler = (req, res) => {
  const errMsg = 'URL or Method is not found.';
  logger.error('notFoundErrorHandler url:', req.url);
  res.status(404);
  return res.send({
    code: _httpError.NO_URL_OR_METHOD,
    error: {
      message: errMsg
    }
  });
};
exports.notFoundErrorHandler = notFoundErrorHandler;
const defaultErrHandler = (err, req, res, next) => {
  if (res.headersSent) {
    logger.error('defaultErrHandler headersSent:', (0, _exceptionFormatter.default)(err, {
      format: 'ansi'
    }));
    return next(err); // express 기본 error hanlder 에게 전달.
  }

  req.errStack = err.stack;
  const errorLevel = err.status < 500 && err instanceof _httpError.AppError ? 'warn' : 'error';
  const traceId = _clsRtracer.default.id();
  logger[errorLevel]('defaultErrHandler err:', (0, _exceptionFormatter.default)(err, {
    format: 'ansi'
  }));
  logger[errorLevel](`
${traceId} HTTP status: ${err.status} type: ${err.constructor.name} error:${err.message}`);
  let errMsg = '';
  if (!_common.IS_REAL_PRODUCTION) {
    errMsg = err instanceof _httpError.AppError ? err.message : 'Server error.';
  }
  const error = {
    code: err.code,
    message: `[${String(traceId).substring(0, 8)}]\n` + (0, _errorMessage.errorMessage)(err.code),
    svMessage: `[${String(traceId).substring(0, 8)}] ${process.env.MY_NAME === 'ADMIN_SERVER' ? err.message : errMsg}`
  };
  res.status(err.status || 400);
  return res.send({
    error
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJnZXRMb2dnZXIiLCJmYWxsYmFja0Vycm9ySGFuZGxlciIsInJvdXRlciIsInVzZSIsIm5vdEZvdW5kRXJyb3JIYW5kbGVyIiwiZGVmYXVsdEVyckhhbmRsZXIiLCJyZXEiLCJyZXMiLCJlcnJNc2ciLCJlcnJvciIsInVybCIsInN0YXR1cyIsInNlbmQiLCJjb2RlIiwiTk9fVVJMX09SX01FVEhPRCIsIm1lc3NhZ2UiLCJlcnIiLCJuZXh0IiwiaGVhZGVyc1NlbnQiLCJleGNlcHRpb25Gb3JtYXR0ZXIiLCJmb3JtYXQiLCJlcnJTdGFjayIsInN0YWNrIiwiZXJyb3JMZXZlbCIsIkFwcEVycm9yIiwidHJhY2VJZCIsInJUcmFjZXIiLCJpZCIsImNvbnN0cnVjdG9yIiwibmFtZSIsIklTX1JFQUxfUFJPRFVDVElPTiIsIlN0cmluZyIsInN1YnN0cmluZyIsImVycm9yTWVzc2FnZSIsInN2TWVzc2FnZSIsInByb2Nlc3MiLCJlbnYiLCJNWV9OQU1FIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2dsb2JhbC1jb21tb24vc2VydmVyL3JvdXRlcy9oZWxwZXIvZmFsbGJhY2tFcnJvckhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJUcmFjZXIgZnJvbSAnY2xzLXJ0cmFjZXInXHJcbmltcG9ydCBleGNlcHRpb25Gb3JtYXR0ZXIgZnJvbSAnZXhjZXB0aW9uLWZvcm1hdHRlcidcclxuXHJcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dlcidcclxuaW1wb3J0IHtcclxuICBBcHBFcnJvcixcclxuICBOT19VUkxfT1JfTUVUSE9ELFxyXG59IGZyb20gJy4uLy4uLy4uL2Vycm9yL2h0dHAtZXJyb3InXHJcbmltcG9ydCB7IElTX1JFQUxfUFJPRFVDVElPTiB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9jb21tb24nXHJcbmltcG9ydCB7IGVycm9yTWVzc2FnZSB9IGZyb20gJ0BnbG9iYWwtY29tbW9uL2Vycm9yL2Vycm9yLW1lc3NhZ2UnXHJcbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignZmFsbGJhY2tFcnJvckhhbmRsZXIudHMnKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmFsbGJhY2tFcnJvckhhbmRsZXIgKHJvdXRlcikge1xyXG4gIHJvdXRlci51c2Uobm90Rm91bmRFcnJvckhhbmRsZXIpXHJcbiAgcm91dGVyLnVzZShkZWZhdWx0RXJySGFuZGxlcilcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG5vdEZvdW5kRXJyb3JIYW5kbGVyID0gKHJlcSwgcmVzKSA9PiB7XHJcbiAgY29uc3QgZXJyTXNnID0gJ1VSTCBvciBNZXRob2QgaXMgbm90IGZvdW5kLidcclxuICBsb2dnZXIuZXJyb3IoJ25vdEZvdW5kRXJyb3JIYW5kbGVyIHVybDonLCByZXEudXJsKVxyXG4gIHJlcy5zdGF0dXMoNDA0KVxyXG4gIHJldHVybiByZXMuc2VuZCh7IGNvZGU6IE5PX1VSTF9PUl9NRVRIT0QsIGVycm9yOiB7IG1lc3NhZ2U6IGVyck1zZyB9IH0pXHJcbn1cclxuXHJcbmNvbnN0IGRlZmF1bHRFcnJIYW5kbGVyID0gKGVyciwgcmVxLCByZXMsIG5leHQpID0+IHtcclxuICBpZiAocmVzLmhlYWRlcnNTZW50KSB7XHJcbiAgICBsb2dnZXIuZXJyb3IoJ2RlZmF1bHRFcnJIYW5kbGVyIGhlYWRlcnNTZW50OicsIGV4Y2VwdGlvbkZvcm1hdHRlcihlcnIsIHsgZm9ybWF0OiAnYW5zaScgfSkpXHJcbiAgICByZXR1cm4gbmV4dChlcnIpIC8vIGV4cHJlc3Mg6riw67O4IGVycm9yIGhhbmxkZXIg7JeQ6rKMIOyghOuLrC5cclxuICB9XHJcblxyXG4gIHJlcS5lcnJTdGFjayA9IGVyci5zdGFja1xyXG5cclxuICBjb25zdCBlcnJvckxldmVsID0gZXJyLnN0YXR1cyA8IDUwMCAmJiBlcnIgaW5zdGFuY2VvZiBBcHBFcnJvciA/ICd3YXJuJyA6ICdlcnJvcidcclxuXHJcbiAgY29uc3QgdHJhY2VJZCA9IHJUcmFjZXIuaWQoKVxyXG4gIGxvZ2dlcltlcnJvckxldmVsXSgnZGVmYXVsdEVyckhhbmRsZXIgZXJyOicsIGV4Y2VwdGlvbkZvcm1hdHRlcihlcnIsIHsgZm9ybWF0OiAnYW5zaScgfSkpXHJcbiAgbG9nZ2VyW2Vycm9yTGV2ZWxdKFxyXG4gICAgYFxyXG4ke3RyYWNlSWR9IEhUVFAgc3RhdHVzOiAke2Vyci5zdGF0dXN9IHR5cGU6ICR7ZXJyLmNvbnN0cnVjdG9yLm5hbWV9IGVycm9yOiR7ZXJyLm1lc3NhZ2V9YCxcclxuICApXHJcblxyXG4gIGxldCBlcnJNc2cgPSAnJ1xyXG4gIGlmICghSVNfUkVBTF9QUk9EVUNUSU9OKSB7XHJcbiAgICBlcnJNc2cgPSBlcnIgaW5zdGFuY2VvZiBBcHBFcnJvciA/IGVyci5tZXNzYWdlIDogJ1NlcnZlciBlcnJvci4nXHJcbiAgfVxyXG5cclxuICBjb25zdCBlcnJvciA9IHtcclxuICAgIGNvZGU6IGVyci5jb2RlLFxyXG4gICAgbWVzc2FnZTogYFske1N0cmluZyh0cmFjZUlkKS5zdWJzdHJpbmcoMCwgOCl9XVxcbmAgKyBlcnJvck1lc3NhZ2UoZXJyLmNvZGUpLFxyXG4gICAgc3ZNZXNzYWdlOiBgWyR7U3RyaW5nKHRyYWNlSWQpLnN1YnN0cmluZygwLCA4KX1dICR7cHJvY2Vzcy5lbnYuTVlfTkFNRSA9PT0gJ0FETUlOX1NFUlZFUicgPyBlcnIubWVzc2FnZSA6IGVyck1zZ31gLFxyXG4gIH1cclxuXHJcbiAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDQwMClcclxuICByZXR1cm4gcmVzLnNlbmQoeyBlcnJvciB9KVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUFpRTtBQUNqRSxNQUFNQSxNQUFNLEdBQUcsSUFBQUMsaUJBQVMsRUFBQyx5QkFBeUIsQ0FBQztBQUVwQyxTQUFTQyxvQkFBb0IsQ0FBRUMsTUFBTSxFQUFFO0VBQ3BEQSxNQUFNLENBQUNDLEdBQUcs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