"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractUserFromJwt = void 0;
exports.getJWT = getJWT;
exports.hasJWT = hasJWT;
exports.jwtGuard = jwtGuard;
exports.refreshGuard = refreshGuard;
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _logger = require("@global-common/utils/logger");
var _httpError = require("@global-common/error/http-error");
var _env = require("@global-common/constants/env");
var _enum = require("@global-common/constants/enum");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// import * as jwt from 'jsonwebtoken'

const logger = (0, _logger.getLogger)('jwtVerify.ts');
function getJWT(req) {
  const {
    authorization
  } = req.headers;
  logger.debug('getJWT ', authorization);
  const hasJwt = authorization && authorization.startsWith('Bearer');
  logger.debug('hasJwt ', hasJwt);
  if (!hasJwt) {
    throw new _httpError.Unauthorized(_httpError.NO_JWT, 'No JWT');
  }
  const [, token] = authorization.split(' ');
  logger.debug('token ', token);
  return token;
}
function hasJWT(req) {
  const {
    authorization
  } = req.headers;
  logger.debug('hasJWT ', authorization);
  const hasJwt = authorization && authorization.startsWith('Bearer');
  logger.debug('hasJWT ', hasJwt);
  if (!hasJwt) return false;
  return true;
}
const extractUserFromJwt = async (token, userType) => {
  let jwtPayload;
  try {
    jwtPayload = _jsonwebtoken.default.verify(token, _env.commonEnv.JWT_SECRET_KEY);
    logger.info('jwtPayload: ', jwtPayload);
    validatePayload(jwtPayload, userType, _enum.JwtTokenType.ACCESS);
    logger.info('extractUserFromJwt userId: ', jwtPayload.id);
  } catch (err) {
    if (!(err instanceof _httpError.Unauthorized)) {
      err.status = _httpError.Unauthorized.STATUS;
      err.code = _httpError.INVALID_JWT;
    }
    if (err.name === 'TokenExpiredError') {
      err.code = _httpError.EXPIRED_JWT;
    }
    throw err;
  }
  return {
    id: jwtPayload.id,
    deviceId: jwtPayload.deviceId
  };
};
exports.extractUserFromJwt = extractUserFromJwt;
function validatePayload(jwtPayload, userType, tokenType) {
  if (jwtPayload.type !== userType) throw new _httpError.Unauthorized(_httpError.NOT_AUTHORIZED, 'No matching user type');
  if (jwtPayload.token !== tokenType) throw new _httpError.Unauthorized(_httpError.NOT_AUTHORIZED, 'It is not access token');
}
const extractUserFromJwtWithoutValidate = async ({
  token,
  userType,
  refreshToken
}) => {
  const jwtPayload = _jsonwebtoken.default.decode(token);
  logger.info('decoded jwtPayload: ', jwtPayload);
  validatePayload(jwtPayload, userType, _enum.JwtTokenType.ACCESS);
  try {
    const refreshJwtPayload = _jsonwebtoken.default.verify(refreshToken, _env.commonEnv.JWT_SECRET_KEY);
    validatePayload(refreshJwtPayload, userType, _enum.JwtTokenType.REFRESH);
    logger.info('refresh jwtPayload: ', refreshJwtPayload);
    if (jwtPayload.id !== refreshJwtPayload.id) throw new _httpError.Unauthorized(_httpError.NOT_AUTHORIZED, 'Not Match tokens');
  } catch (err) {
    if (!(err instanceof _httpError.Unauthorized)) {
      err.status = _httpError.Unauthorized.STATUS;
      err.code = _httpError.INVALID_REFRESH_JWT;
    }
    if (err.name === 'TokenExpiredError') {
      err.code = _httpError.EXPIRED_REFRESH_JWT;
    }
    throw err;
  }
  return {
    id: jwtPayload.id,
    deviceId: jwtPayload.deviceId
  };
};
async function jwtGuard(userType, req) {
  const token = getJWT(req);
  const user = await extractUserFromJwt(token, userType);
  return user;
}
async function refreshGuard(userType, req, refreshToken) {
  const token = getJWT(req);
  const user = await extractUserFromJwtWithoutValidate({
    token,
    userType,
    refreshToken
  });
  return user;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,