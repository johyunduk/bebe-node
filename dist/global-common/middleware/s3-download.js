"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadFile = downloadFile;
exports.getS3FileList = getS3FileList;
exports.signedUrlOfS3 = void 0;
var _awsSdk = _interopRequireDefault(require("aws-sdk"));
var _env = require("@global-common/constants/env");
var _logger = require("@global-common/utils/logger");
var _httpError = require("@global-common/error/http-error");
var _constants = require("@global-common/constants/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const logger = (0, _logger.getLogger)('s3-download.ts');
const s3 = new _awsSdk.default.S3({
  region: _env.commonEnv.AWS_REGION
});
const bucket = _env.commonEnv.AWS_BUCKET;
async function fileInfoInS3(key) {
  logger.info('fileInfoInS3 = ', key);
  const params = {
    Bucket: bucket,
    Key: key
  };
  try {
    const data = await s3.headObject(params).promise();
    return data;
  } catch (err) {
    logger.warn('Fail to get file Info. on S3: ');
    logger.warn(err);
    throw new _httpError.BadRequest(_httpError.NO_DATA, '파일을 찾을 수가 없습니다.');
  }
}
function getStreamFromS3(fileName) {
  logger.info('getStreamFromS3 =', fileName);
  const params = {
    Bucket: bucket,
    Key: fileName
  };
  try {
    return s3.getObject(params).createReadStream();
  } catch (err) {
    logger.warn(err);
    throw new _httpError.InternalServerError(_httpError.EXT_API_CALL_FAIL, 'Fail to download from S3');
  }
}
async function downloadFile(params) {
  /*
    stream으로 브라우저에 파일을 전달하려면 return header의 Content-Length에 파일크기정보가 필요하다.
    Content-Length이 set 되지 않으면 파일을 브라우저에서 저장을 하지 못함.
    따라서 먼저 파일에 대한 정보만 가져와서 크기를 가져옴.
  */
  const {
    fileName,
    res,
    next
  } = params;
  const {
    ContentLength
  } = await fileInfoInS3(fileName);
  res.set('Content-Disposition', `attachment; filename=${fileName}`);
  res.set('Content-Type', 'application/octet-stream');
  res.set('Content-Length', ContentLength);
  getStreamFromS3(fileName).on('error', next).pipe(res);
}
async function getS3FileList(prefix) {
  logger.info('getS3FileList');
  const params = {
    Bucket: bucket,
    MaxKeys: 10,
    Prefix: prefix // ex) laundry/459
  };

  try {
    return s3.listObjects(params).promise();
  } catch (err) {
    logger.warn(err);
    throw new _httpError.InternalServerError(_httpError.EXT_API_CALL_FAIL, 'Fail to files list from S3');
  }
}
const signedUrlOfS3 = async key => {
  await fileInfoInS3(key);
  const params = {
    Bucket: bucket,
    Key: key,
    Expires: _constants.PRIVATE_IMAGE_EXPIRES
  };
  try {
    return s3.getSignedUrlPromise('getObject', params);
  } catch (err) {
    logger.warn(err);
    throw new _httpError.InternalServerError(_httpError.EXT_API_CALL_FAIL, 'Fail to signed url from S3');
  }
};
exports.signedUrlOfS3 = signedUrlOfS3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJnZXRMb2dnZXIiLCJzMyIsImF3cyIsIlMzIiwicmVnaW9uIiwiY29tbW9uRW52IiwiQVdTX1JFR0lPTiIsImJ1Y2tldCIsIkFXU19CVUNLRVQiLCJmaWxlSW5mb0luUzMiLCJrZXkiLCJpbmZvIiwicGFyYW1zIiwiQnVja2V0IiwiS2V5IiwiZGF0YSIsImhlYWRPYmplY3QiLCJwcm9taXNlIiwiZXJyIiwid2FybiIsIkJhZFJlcXVlc3QiLCJOT19EQVRBIiwiZ2V0U3RyZWFtRnJvbVMzIiwiZmlsZU5hbWUiLCJnZXRPYmplY3QiLCJjcmVhdGVSZWFkU3RyZWFtIiwiSW50ZXJuYWxTZXJ2ZXJFcnJvciIsIkVYVF9BUElfQ0FMTF9GQUlMIiwiZG93bmxvYWRGaWxlIiwicmVzIiwibmV4dCIsIkNvbnRlbnRMZW5ndGgiLCJzZXQiLCJvbiIsInBpcGUiLCJnZXRTM0ZpbGVMaXN0IiwicHJlZml4IiwiTWF4S2V5cyIsIlByZWZpeCIsImxpc3RPYmplY3RzIiwic2lnbmVkVXJsT2ZTMyIsIkV4cGlyZXMiLCJQUklWQVRFX0lNQUdFX0VYUElSRVMiLCJnZXRTaWduZWRVcmxQcm9taXNlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dsb2JhbC1jb21tb24vbWlkZGxld2FyZS9zMy1kb3dubG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBhd3MgZnJvbSAnYXdzLXNkaydcbmltcG9ydCB7IGNvbW1vbkVudiB9IGZyb20gJ0BnbG9iYWwtY29tbW9uL2NvbnN0YW50cy9lbnYnXG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICdAZ2xvYmFsLWNvbW1vbi91dGlscy9sb2dnZXInXG5pbXBvcnQgeyBCYWRSZXF1ZXN0LCBFWFRfQVBJX0NBTExfRkFJTCwgSW50ZXJuYWxTZXJ2ZXJFcnJvciwgTk9fREFUQSB9IGZyb20gJ0BnbG9iYWwtY29tbW9uL2Vycm9yL2h0dHAtZXJyb3InXG5pbXBvcnQgeyBQUklWQVRFX0lNQUdFX0VYUElSRVMgfSBmcm9tICdAZ2xvYmFsLWNvbW1vbi9jb25zdGFudHMvY29uc3RhbnRzJ1xuXG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoJ3MzLWRvd25sb2FkLnRzJylcblxuY29uc3QgczMgPSBuZXcgYXdzLlMzKHsgcmVnaW9uOiBjb21tb25FbnYuQVdTX1JFR0lPTiB9KVxuY29uc3QgYnVja2V0ID0gY29tbW9uRW52LkFXU19CVUNLRVRcblxuYXN5bmMgZnVuY3Rpb24gZmlsZUluZm9JblMzIChrZXk6IHN0cmluZykge1xuICBsb2dnZXIuaW5mbygnZmlsZUluZm9JblMzID0gJywga2V5KVxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgQnVja2V0OiBidWNrZXQsXG4gICAgS2V5OiBrZXksXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzMy5oZWFkT2JqZWN0KHBhcmFtcykucHJvbWlzZSgpXG4gICAgcmV0dXJuIGRhdGFcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oJ0ZhaWwgdG8gZ2V0IGZpbGUgSW5mby4gb24gUzM6ICcpXG4gICAgbG9nZ2VyLndhcm4oZXJyKVxuICAgIHRocm93IG5ldyBCYWRSZXF1ZXN0KE5PX0RBVEEsICftjIzsnbzsnYQg7LC+7J2EIOyImOqwgCDsl4bsirXri4jri6QuJylcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdHJlYW1Gcm9tUzMgKGZpbGVOYW1lOiBzdHJpbmcpIHtcbiAgbG9nZ2VyLmluZm8oJ2dldFN0cmVhbUZyb21TMyA9JywgZmlsZU5hbWUpXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBCdWNrZXQ6IGJ1Y2tldCxcbiAgICBLZXk6IGZpbGVOYW1lLFxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gczMuZ2V0T2JqZWN0KHBhcmFtcykuY3JlYXRlUmVhZFN0cmVhbSgpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKGVycilcbiAgICB0aHJvdyBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvcihFWFRfQVBJX0NBTExfRkFJTCwgJ0ZhaWwgdG8gZG93bmxvYWQgZnJvbSBTMycpXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkRmlsZSAocGFyYW1zOiB7XG4gIGZpbGVOYW1lOiBzdHJpbmdcbiAgcmVzOiBhbnlcbiAgbmV4dDogYW55XG59KSB7XG4gIC8qXG4gICAgc3RyZWFt7Jy866GcIOu4jOudvOyasOyggOyXkCDtjIzsnbzsnYQg7KCE64us7ZWY66Ck66m0IHJldHVybiBoZWFkZXLsnZggQ29udGVudC1MZW5ndGjsl5Ag7YyM7J287YGs6riw7KCV67O06rCAIO2VhOyalO2VmOuLpC5cbiAgICBDb250ZW50LUxlbmd0aOydtCBzZXQg65CY7KeAIOyViuycvOuptCDtjIzsnbzsnYQg67iM65287Jqw7KCA7JeQ7IScIOyggOyepeydhCDtlZjsp4Ag66q77ZWoLlxuICAgIOuUsOudvOyEnCDrqLzsoIAg7YyM7J287JeQIOuMgO2VnCDsoJXrs7Trp4wg6rCA7KC47JmA7IScIO2BrOq4sOulvCDqsIDsoLjsmLQuXG4gICovXG4gIGNvbnN0IHsgZmlsZU5hbWUsIHJlcywgbmV4dCB9ID0gcGFyYW1zXG4gIGNvbnN0IHsgQ29udGVudExlbmd0aCB9ID0gYXdhaXQgZmlsZUluZm9JblMzKGZpbGVOYW1lKVxuICByZXMuc2V0KCdDb250ZW50LURpc3Bvc2l0aW9uJywgYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPSR7ZmlsZU5hbWV9YClcbiAgcmVzLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpXG4gIHJlcy5zZXQoJ0NvbnRlbnQtTGVuZ3RoJywgQ29udGVudExlbmd0aClcblxuICBnZXRTdHJlYW1Gcm9tUzMoZmlsZU5hbWUpLm9uKCdlcnJvcicsIG5leHQpLnBpcGUocmVzKVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UzNGaWxlTGlzdCAocHJlZml4OiBzdHJpbmcpIHtcbiAgbG9nZ2VyLmluZm8oJ2dldFMzRmlsZUxpc3QnKVxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBCdWNrZXQ6IGJ1Y2tldCxcbiAgICBNYXhLZXlzOiAxMCxcbiAgICBQcmVmaXg6IHByZWZpeCwgLy8gZXgpIGxhdW5kcnkvNDU5XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBzMy5saXN0T2JqZWN0cyhwYXJhbXMpLnByb21pc2UoKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIud2FybihlcnIpXG4gICAgdGhyb3cgbmV3IEludGVybmFsU2VydmVyRXJyb3IoRVhUX0FQSV9DQUxMX0ZBSUwsICdGYWlsIHRvIGZpbGVzIGxpc3QgZnJvbSBTMycpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNpZ25lZFVybE9mUzMgPSBhc3luYyAoa2V5OiBzdHJpbmcpID0+IHtcbiAgYXdhaXQgZmlsZUluZm9JblMzKGtleSlcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIEJ1Y2tldDogYnVja2V0LFxuICAgIEtleToga2V5LFxuICAgIEV4cGlyZXM6IFBSSVZBVEVfSU1BR0VfRVhQSVJFUyxcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBzMy5nZXRTaWduZWRVcmxQcm9taXNlKCdnZXRPYmplY3QnLCBwYXJhbXMpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKGVycilcbiAgICB0aHJvdyBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvcihFWFRfQVBJX0NBTExfRkFJTCwgJ0ZhaWwgdG8gc2lnbmVkIHVybCBmcm9tIFMzJylcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBMEU7QUFFMUUsTUFBTUEsTUFBTSxHQUFHLElBQUFDLGlCQUFTLEVBQUMsZ0JBQWdCLENBQUM7QUFFMUMsTUFBTUMsRUFBRSxHQUFHLElBQUlDLGVBQUcsQ0FBQ0MsRUFBRSxDQUFDO0VBQUVDLE1BQU0sRUFBRUMsY0FBUyxDQUFDQztBQUFXLENBQUMsQ0FBQztBQUN2RCxNQUFNQyxNQUFNLEdBQUdGLGNBQVMsQ0FBQ0cs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