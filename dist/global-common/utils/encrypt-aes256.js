"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encryptWithAES = exports.decryptWithAES = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var _env = require("@global-common/constants/env");
var _logger = require("@global-common/utils/logger");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const logger = (0, _logger.getLogger)('encrypt-aes256.ts');
const algorithm = 'aes-256-cbc';

// query: select TO_BASE64(aes_encrypt(plain, ENCRYPT_KEY, sha2(ENCRYPT_KEY, 256));
const encryptWithAES = plain => {
  logger.info('encryptWithAES');
  const hashed = _crypto.default.createHash('sha256').update(_env.commonEnv.ENCRYPT_KEY).digest('hex');

  // key는 32바이트, iv는 16바이트
  const cipher = _crypto.default.createCipheriv(algorithm, _env.commonEnv.ENCRYPT_KEY, hashed.slice(0, 16));
  let encrypted = cipher.update(plain, 'utf8', 'base64');
  encrypted += cipher.final('base64');
  return encrypted;
};

// query: select aes_decrypt(FROM_BASE64(phone),ENCRYPT_KEY, sha2(ENCRYPT_KEY,256));
exports.encryptWithAES = encryptWithAES;
const decryptWithAES = encrypted => {
  logger.info('decryptWithAES');
  const hashed = _crypto.default.createHash('sha256').update(_env.commonEnv.ENCRYPT_KEY).digest('hex');
  const deciper = _crypto.default.createDecipheriv(algorithm, _env.commonEnv.ENCRYPT_KEY, hashed.slice(0, 16));
  let plain = deciper.update(encrypted, 'base64', 'utf8');
  plain += deciper.final('utf8');
  return plain;
};
exports.decryptWithAES = decryptWithAES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJnZXRMb2dnZXIiLCJhbGdvcml0aG0iLCJlbmNyeXB0V2l0aEFFUyIsInBsYWluIiwiaW5mbyIsImhhc2hlZCIsImNyeXB0byIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJjb21tb25FbnYiLCJFTkNSWVBUX0tFWSIsImRpZ2VzdCIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2Iiwic2xpY2UiLCJlbmNyeXB0ZWQiLCJmaW5hbCIsImRlY3J5cHRXaXRoQUVTIiwiZGVjaXBlciIsImNyZWF0ZURlY2lwaGVyaXYiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2xvYmFsLWNvbW1vbi91dGlscy9lbmNyeXB0LWFlczI1Ni50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0bydcbmltcG9ydCB7IGNvbW1vbkVudiB9IGZyb20gJ0BnbG9iYWwtY29tbW9uL2NvbnN0YW50cy9lbnYnXG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICdAZ2xvYmFsLWNvbW1vbi91dGlscy9sb2dnZXInXG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignZW5jcnlwdC1hZXMyNTYudHMnKVxuXG5jb25zdCBhbGdvcml0aG0gPSAnYWVzLTI1Ni1jYmMnXG5cbi8vIHF1ZXJ5OiBzZWxlY3QgVE9fQkFTRTY0KGFlc19lbmNyeXB0KHBsYWluLCBFTkNSWVBUX0tFWSwgc2hhMihFTkNSWVBUX0tFWSwgMjU2KSk7XG5leHBvcnQgY29uc3QgZW5jcnlwdFdpdGhBRVMgPSAocGxhaW46IHN0cmluZykgPT4ge1xuICBsb2dnZXIuaW5mbygnZW5jcnlwdFdpdGhBRVMnKVxuICBjb25zdCBoYXNoZWQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGNvbW1vbkVudi5FTkNSWVBUX0tFWSkuZGlnZXN0KCdoZXgnKVxuXG4gIC8vIGtleeuKlCAzMuuwlOydtO2KuCwgaXbripQgMTbrsJTsnbTtirhcbiAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KGFsZ29yaXRobSwgY29tbW9uRW52LkVOQ1JZUFRfS0VZLCBoYXNoZWQuc2xpY2UoMCwgMTYpKVxuICBsZXQgZW5jcnlwdGVkID0gY2lwaGVyLnVwZGF0ZShwbGFpbiwgJ3V0ZjgnLCAnYmFzZTY0JylcbiAgZW5jcnlwdGVkICs9IGNpcGhlci5maW5hbCgnYmFzZTY0JylcblxuICByZXR1cm4gZW5jcnlwdGVkXG59XG5cbi8vIHF1ZXJ5OiBzZWxlY3QgYWVzX2RlY3J5cHQoRlJPTV9CQVNFNjQocGhvbmUpLEVOQ1JZUFRfS0VZLCBzaGEyKEVOQ1JZUFRfS0VZLDI1NikpO1xuZXhwb3J0IGNvbnN0IGRlY3J5cHRXaXRoQUVTID0gKGVuY3J5cHRlZDogc3RyaW5nKSA9PiB7XG4gIGxvZ2dlci5pbmZvKCdkZWNyeXB0V2l0aEFFUycpXG4gIGNvbnN0IGhhc2hlZCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoY29tbW9uRW52LkVOQ1JZUFRfS0VZKS5kaWdlc3QoJ2hleCcpXG5cbiAgY29uc3QgZGVjaXBlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KGFsZ29yaXRobSwgY29tbW9uRW52LkVOQ1JZUFRfS0VZLCBoYXNoZWQuc2xpY2UoMCwgMTYpKVxuICBsZXQgcGxhaW4gPSBkZWNpcGVyLnVwZGF0ZShlbmNyeXB0ZWQsICdiYXNlNjQnLCAndXRmOCcpXG4gIHBsYWluICs9IGRlY2lwZXIuZmluYWwoJ3V0ZjgnKVxuXG4gIHJldHVybiBwbGFpblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFBdUQ7QUFFdkQsTUFBTUEsTUFBTSxHQUFHLElBQUFDLGlCQUFTLEVBQUMsbUJBQW1CLENBQUM7QUFFN0MsTUFBTUMsU0FBUyxHQUFHLGFBQWE7O0FBRS9CO0FBQ08sTUFBTUMsY0FBYyxHQUFJQyxLQUFhLElBQUs7RUFDL0NKLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLGdCQUFnQixDQUFDO0VBQzdCLE1BQU1DLE1BQU0sR0FBR0MsZUFBTSxDQUFDQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsY0FBUyxDQUFDQyxXQUFXLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLEtBQUssQ0FBQzs7RUFFdEY7RUFDQSxNQUFNQyxNQUFNLEdBQUdOLGVBQU0sQ0FBQ08sY0FBYyxDQUFDWixTQUFTLEVBQUVRLGNBQVMsQ0FBQ0MsV0FBVyxFQUFFTCxNQUFNLENBQUNTLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDM0YsSUFBSUMsU0FBUyxHQUFHSCxNQUFNLENBQUNKLE1BQU0sQ0FBQ0wsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUM7RUFDdERZLFNBQVMsSUFBSUgsTUFBTSxDQUFDSSxLQUFLLENBQUMsUUFBUSxDQUFDO0VBRW5DLE9BQU9ELFNBQVM7QUFDbEIsQ0FBQzs7QUFFRDtBQUFBO0FBQ08sTUFBTUUsY0FBYyxHQUFJRixTQUFpQixJQUFLO0VBQ25EaEIsTUFBTSxDQUFDSyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7RUFDN0IsTUFBTUMsTUFBTSxHQUFHQyxlQUFNLENBQUNDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxjQUFTLENBQUNDLFdBQVcsQ0FBQyxDQUFDQyxNQUFNLENBQUMsS0FBSyxDQUFDO0VBRXRGLE1BQU1PLE9BQU8sR0FBR1osZUFBTSxDQUFDYSxnQkFBZ0IsQ0FBQ2xCLFNBQVMsRUFBRVEsY0FBUyxDQUFDQyxXQUFXLEVBQUVMLE1BQU0sQ0FBQ1MsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztFQUM5RixJQUFJWCxLQUFLLEdBQUdlLE9BQU8sQ0FBQ1YsTUFBTSxDQUFDTyxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQztFQUN2RFosS0FBSyxJQUFJZSxPQUFPLENBQUNGLEtBQUssQ0FBQyxNQUFNLENBQUM7RUFFOUIsT0FBT2IsS0FBSztBQUNkLENBQUM7QUFBQSJ9