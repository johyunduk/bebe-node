"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mallRoutes;
var _express = require("express");
var _asyncHandler = _interopRequireDefault(require("@global-common/server/routes/helper/asyncHandler"));
var _userGuard = require("@diary-server/routes/middleware/userGuard");
var _validator = require("@global-common/utils/validator");
var _joi = _interopRequireDefault(require("joi"));
var _mallController = require("@diary-server/controller/mall-controller");
var _utils = require("@global-common/server/routes/helper/utils");
var _localUpload = require("@global-common/middleware/local-upload");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mallRoutes(router = (0, _express.Router)()) {
  // 쇼핑몰 사이즈 목록
  router.get('/mall/size', (0, _asyncHandler.default)(getSizeList));
  // 쇼핑몰 카테고리 등록
  router.post('/mall/category', _userGuard.diaryGuard, (0, _asyncHandler.default)(postMallCategory));
  // 쇼핑몰 카테고리 목록
  router.get('/mall/category', _userGuard.diaryGuard, (0, _asyncHandler.default)(getMallCategory));
  // 쇼핑몰 상품 등록
  router.post('/mall/item', _userGuard.diaryGuard, _localUpload.localUpload.single('file'), (0, _asyncHandler.default)(postMallItem));
  // 쇼핑몰 리스트 조회
  router.get('/mall/item', _userGuard.diaryGuard, (0, _asyncHandler.default)(getMallList));
  // 쇼핑몰 상품 상세
  router.get('/mall/item/:id', _userGuard.diaryGuard, (0, _asyncHandler.default)(getMallDetail));
  // 쇼핑몰 상품 수정
  router.put('/mall/item/:id', _userGuard.diaryGuard, _localUpload.localUpload.single('file'), (0, _asyncHandler.default)(putMallItem));
  async function getSizeList(req, res) {
    const sizeList = [{
      id: 1,
      name: 'S'
    }, {
      id: 2,
      name: 'M'
    }, {
      id: 3,
      name: 'L'
    }, {
      id: 4,
      name: 'XL'
    }, {
      id: 5,
      name: 'XXL'
    }];
    res.json(sizeList);
  }
  async function postMallCategory(req, res) {
    const {
      body
    } = req;
    const {
      name
    } = (0, _validator.validateInputData)(body, {
      name: _joi.default.string().required()
    });
    await (0, _mallController.saveCategory)(name);
    (0, _utils.sendOk)(res);
  }
  async function getMallCategory(req, res) {
    const result = await (0, _mallController.fetchCategoryList)();
    res.json(result);
  }
  async function postMallItem(req, res) {
    const {
      body
    } = req;
    const param = (0, _validator.validateInputData)(body, {
      categoryId: _joi.default.number().required(),
      name: _joi.default.string().required(),
      price: _joi.default.number().required(),
      description: _joi.default.string().required()
    });
    await (0, _mallController.saveItem)(param, req.file);
    (0, _utils.sendOk)(res);
  }
  async function getMallList(req, res) {
    const {
      query
    } = req;
    const param = (0, _validator.validateInputData)(query, {
      categoryId: _joi.default.number(),
      page: _joi.default.number()
    });
    const result = await (0, _mallController.fetchItemList)(param);
    res.json(result);
  }
  async function getMallDetail(req, res) {
    const result = await (0, _mallController.fetchItemDetail)(req.params.id);
    res.json(result);
  }
  async function putMallItem(req, res) {
    const {
      body,
      params
    } = req;
    const param = (0, _validator.validateInputData)(body, {
      categoryId: _joi.default.number().required(),
      name: _joi.default.string().required(),
      price: _joi.default.number().required(),
      description: _joi.default.string().required()
    });
    param.id = params.id;
    await (0, _mallController.modifyItem)(param, req.file);
    (0, _utils.sendOk)(res);
  }
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,