"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userJoin = userJoin;
exports.userLogin = userLogin;
exports.userLogout = userLogout;
var _user = _interopRequireDefault(require("@global-common/db/model/user"));
var _httpError = require("@global-common/error/http-error");
var _authenticator = require("@global-common/utils/authenticator");
var _makeJwt = require("@global-common/utils/make-jwt");
var _enum = require("@global-common/constants/enum");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
async function userJoin(body) {
  const {
    name,
    email,
    password,
    gender,
    birthDate
  } = body;
  const user = await (0, _user.default)().findOne({
    where: {
      email
    }
  });
  if (user) throw new _httpError.BadEntity(_httpError.ALREADY_EXISTS, '이미 등록된 이메일입니다.');
  const hashedPassword = (0, _authenticator.encrypt)(password);
  (0, _user.default)().create({
    name,
    email,
    password: hashedPassword,
    gender,
    birthDate
  });
}
async function userLogin(email, password) {
  const user = await (0, _user.default)().findOne({
    where: {
      email
    }
  });
  if (!user) throw new _httpError.Unauthorized(_httpError.NOT_AUTHORIZED, '등록되지 않은 이메일입니다.');
  if (!(0, _authenticator.validateCode)(password, user.password)) throw new _httpError.Unauthorized(_httpError.NOT_AUTHORIZED, '비밀번호가 일치하지 않습니다');
  const {
    accessToken,
    refreshToken
  } = (0, _makeJwt.makeJWT)(user.id, _enum.UserType.Diary);
  user.refreshToken = refreshToken;
  user.save();
  return {
    accessToken,
    refreshToken,
    user: {
      id: user.id,
      name: user.name,
      isAdmin: user.isAdmin
    }
  };
}
async function userLogout(id) {
  const user = await (0, _user.default)().findOne({
    where: {
      id
    }
  });
  if (!user) throw new _httpError.NotFound(_httpError.NO_USER, '사용자가 없습니다.');
  user.refreshToken = null;
  user.save();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VySm9pbiIsImJvZHkiLCJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImdlbmRlciIsImJpcnRoRGF0ZSIsInVzZXIiLCJVc2VyIiwiZmluZE9uZSIsIndoZXJlIiwiQmFkRW50aXR5IiwiQUxSRUFEWV9FWElTVFMiLCJoYXNoZWRQYXNzd29yZCIsImVuY3J5cHQiLCJjcmVhdGUiLCJ1c2VyTG9naW4iLCJVbmF1dGhvcml6ZWQiLCJOT1RfQVVUSE9SSVpFRCIsInZhbGlkYXRlQ29kZSIsImFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwibWFrZUpXVCIsImlkIiwiVXNlclR5cGUiLCJEaWFyeSIsInNhdmUiLCJpc0FkbWluIiwidXNlckxvZ291dCIsIk5vdEZvdW5kIiwiTk9fVVNFUiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFyeS1zZXJ2ZXIvY29udHJvbGxlci9hdXRoZW50aWNhdGUtY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVXNlciBmcm9tICdAZ2xvYmFsLWNvbW1vbi9kYi9tb2RlbC91c2VyJ1xyXG5pbXBvcnQge1xyXG4gIEFMUkVBRFlfRVhJU1RTLFxyXG4gIEJhZEVudGl0eSxcclxuICBOT19VU0VSLFxyXG4gIE5PVF9BVVRIT1JJWkVELFxyXG4gIE5vdEZvdW5kLFxyXG4gIFVuYXV0aG9yaXplZCxcclxufSBmcm9tICdAZ2xvYmFsLWNvbW1vbi9lcnJvci9odHRwLWVycm9yJ1xyXG5pbXBvcnQgeyBlbmNyeXB0LCB2YWxpZGF0ZUNvZGUgfSBmcm9tICdAZ2xvYmFsLWNvbW1vbi91dGlscy9hdXRoZW50aWNhdG9yJ1xyXG5pbXBvcnQgeyBtYWtlSldUIH0gZnJvbSAnQGdsb2JhbC1jb21tb24vdXRpbHMvbWFrZS1qd3QnXHJcbmltcG9ydCB7IFVzZXJUeXBlIH0gZnJvbSAnQGdsb2JhbC1jb21tb24vY29uc3RhbnRzL2VudW0nXHJcblxyXG5pbnRlcmZhY2UgSm9pbklucHV0cyB7XHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgZW1haWw6IHN0cmluZ1xyXG4gIHBhc3N3b3JkOiBzdHJpbmdcclxuICBnZW5kZXI6IHN0cmluZ1xyXG4gIGJpcnRoRGF0ZTogc3RyaW5nXHJcbn1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVzZXJKb2luIChib2R5OiBKb2luSW5wdXRzKSB7XHJcbiAgY29uc3QgeyBuYW1lLCBlbWFpbCwgcGFzc3dvcmQsIGdlbmRlciwgYmlydGhEYXRlIH0gPSBib2R5XHJcblxyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyKCkuZmluZE9uZSh7IHdoZXJlOiB7IGVtYWlsIH0gfSlcclxuXHJcbiAgaWYgKHVzZXIpIHRocm93IG5ldyBCYWRFbnRpdHkoQUxSRUFEWV9FWElTVFMsICfsnbTrr7gg65Ox66Gd65CcIOydtOuplOydvOyeheuLiOuLpC4nKVxyXG5cclxuICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGVuY3J5cHQocGFzc3dvcmQpXHJcblxyXG4gIFVzZXIoKS5jcmVhdGUoeyBuYW1lLCBlbWFpbCwgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLCBnZW5kZXIsIGJpcnRoRGF0ZSB9KVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlckxvZ2luIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIoKS5maW5kT25lKHsgd2hlcmU6IHsgZW1haWwgfSB9KVxyXG5cclxuICBpZiAoIXVzZXIpIHRocm93IG5ldyBVbmF1dGhvcml6ZWQoTk9UX0FVVEhPUklaRUQsICfrk7HroZ3rkJjsp4Ag7JWK7J2AIOydtOuplOydvOyeheuLiOuLpC4nKVxyXG5cclxuICBpZiAoIXZhbGlkYXRlQ29kZShwYXNzd29yZCwgdXNlci5wYXNzd29yZCkpIHRocm93IG5ldyBVbmF1dGhvcml6ZWQoTk9UX0FVVEhPUklaRUQsICfruYTrsIDrsojtmLjqsIAg7J287LmY7ZWY7KeAIOyViuyKteuLiOuLpCcpXHJcblxyXG4gIGNvbnN0IHsgYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbiB9ID0gbWFrZUpXVCh1c2VyLmlkLCBVc2VyVHlwZS5EaWFyeSlcclxuXHJcbiAgdXNlci5yZWZyZXNoVG9rZW4gPSByZWZyZXNoVG9rZW5cclxuICB1c2VyLnNhdmUoKVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgYWNjZXNzVG9rZW4sXHJcbiAgICByZWZyZXNoVG9rZW4sXHJcbiAgICB1c2VyOiB7XHJcbiAgICAgIGlkOiB1c2VyLmlkLFxyXG4gICAgICBuYW1lOiB1c2VyLm5hbWUsXHJcbiAgICAgIGlzQWRtaW46IHVzZXIuaXNBZG1pbixcclxuICAgIH0sXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlckxvZ291dCAoaWQ6IG51bWJlcikge1xyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyKCkuZmluZE9uZSh7IHdoZXJlOiB7IGlkIH0gfSlcclxuXHJcbiAgaWYgKCF1c2VyKSB0aHJvdyBuZXcgTm90Rm91bmQoTk9fVVNFUiwgJ+yCrOyaqeyekOqwgCDsl4bsirXri4jri6QuJylcclxuXHJcbiAgdXNlci5yZWZyZXNoVG9rZW4gPSBudWxsXHJcbiAgdXNlci5zYXZlKClcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUF3RDtBQVNqRCxlQUFlQSxRQUFRLENBQUVDLElBQWdCLEVBQUU7RUFDaEQsTUFBTTtJQUFFQyxJQUFJO0lBQUVDLEtBQUs7SUFBRUMsUUFBUTtJQUFFQyxNQUFNO0lBQUVDO0VBQVUsQ0FBQyxHQUFHTCxJQUFJO0VBRXpELE1BQU1NLElBQUksR0FBRyxNQUFNLElBQUFDLGFBQUksR0FBRSxDQUFDQyxPQUFPLENBQUM7SUFBRUMsS0FBSyxFQUFFO01BQUVQO0lBQU07RUFBRSxDQUFDLENBQUM7RUFFdkQsSUFBSUksSUFBSSxFQUFFLE1BQU0sSUFBSUksb0JBQVMsQ0FBQ0MseUJBQWMsRUFBRSxnQkFBZ0IsQ0FBQztFQUUvRCxNQUFNQyxjQUFjLEdBQUcsSUFBQUMsc0JBQU8sRUFBQ1YsUUFBUSxDQUFDO0VBRXhDLElBQUFJLGFBQUksR0FBRSxDQUFDTyxNQUFNLENBQUM7SUFBRWIsSUFBSTtJQUFFQyxLQUFLO0lBQUVDLFFBQVEsRUFBRVMsY0FBYztJQUFFUixNQUFNO0lBQUVDO0VBQVUsQ0FBQyxDQUFDO0FBQzdFO0FBRU8sZUFBZVUsU0FBUyxDQUFFYixLQUFhLEVBQUVDLFFBQWdCLEVBQUU7RUFDaEUsTUFBTUcsSUFBSSxHQUFHLE1BQU0sSUFBQUMsYUFBSSxHQUFFLENBQUNDLE9BQU8sQ0FBQztJQUFFQyxLQUFLLEVBQUU7TUFBRVA7SUFBTTtFQUFFLENBQUMsQ0FBQztFQUV2RCxJQUFJLENBQUNJLElBQUksRUFBRSxNQUFNLElBQUlVLHVCQUFZLENBQUNDLHlCQUFjLEVBQUUsaUJBQWlCLENBQUM7RUFFcEUsSUFBSSxDQUFDLElBQUFDLDJCQUFZLEVBQUNmLFFBQVEsRUFBRUcsSUFBSSxDQUFDSCxRQUFRLENBQUMsRUFBRSxNQUFNLElBQUlhLHVCQUFZLENBQUNDLHlCQUFjLEVBQUUsaUJBQWlCLENBQUM7RUFFckcsTUFBTTtJQUFFRSxXQUFXO0lBQUVDO0VBQWEsQ0FBQyxHQUFHLElBQUFDLGdCQUFPLEVBQUNmLElBQUksQ0FBQ2dCLEVBQUUsRUFBRUMsY0FBUSxDQUFDQyxLQUFLLENBQUM7RUFFdEVsQixJQUFJLENBQUNjLFlBQVksR0FBR0EsWUFBWTtFQUNoQ2QsSUFBSSxDQUFDbUIsSUFBSSxFQUFFO0VBRVgsT0FBTztJQUNMTixXQUFXO0lBQ1hDLFlBQVk7SUFDWmQsSUFBSSxFQUFFO01BQ0pnQixFQUFFLEVBQUVoQixJQUFJLENBQUNnQixFQUFFO01BQ1hyQixJQUFJLEVBQUVLLElBQUksQ0FBQ0wsSUFBSTtNQUNmeUIsT0FBTyxFQUFFcEIsSUFBSSxDQUFDb0I7SUFDaEI7RUFDRixDQUFDO0FBQ0g7QUFFTyxlQUFlQyxVQUFVLENBQUVMLEVBQVUsRUFBRTtFQUM1QyxNQUFNaEIsSUFBSSxHQUFHLE1BQU0sSUFBQUMsYUFBSSxHQUFFLENBQUNDLE9BQU8sQ0FBQztJQUFFQyxLQUFLLEVBQUU7TUFBRWE7SUFBRztFQUFFLENBQUMsQ0FBQztFQUVwRCxJQUFJLENBQUNoQixJQUFJLEVBQUUsTUFBTSxJQUFJc0IsbUJBQVEsQ0FBQ0Msa0JBQU8sRUFBRSxZQUFZLENBQUM7RUFFcER2QixJQUFJLENBQUNjLFlBQVksR0FBRyxJQUFJO0VBQ3hCZCxJQUFJLENBQUNtQixJQUFJLEVBQUU7QUFDYiJ9