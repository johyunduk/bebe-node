"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchCategoryList = fetchCategoryList;
exports.fetchItemDetail = fetchItemDetail;
exports.fetchItemList = fetchItemList;
exports.modifyItem = modifyItem;
exports.saveCategory = saveCategory;
exports.saveItem = saveItem;
var _mallItem = _interopRequireDefault(require("@global-common/db/model/mall-item"));
var _category = _interopRequireDefault(require("@global-common/db/model/category"));
var _httpError = require("@global-common/error/http-error");
var _itemCategory = _interopRequireDefault(require("@global-common/db/model/item-category"));
var _logger = require("@global-common/utils/logger");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const logger = (0, _logger.getLogger)('mall-controller.ts');
async function saveCategory(name) {
  const category = await (0, _category.default)().findOne({
    where: {
      name
    }
  });
  if (category) throw new _httpError.BadRequest(_httpError.ALREADY_EXISTS, '이미 존재하는 카테고리입니다.');
  await (0, _category.default)().create({
    name
  });
}
async function saveItem(param, file) {
  const {
    categoryId,
    name,
    price,
    description
  } = param;
  const category = await (0, _category.default)().findOne({
    where: {
      id: categoryId
    }
  });
  if (!category) throw new _httpError.BadRequest(_httpError.NO_DATA, '존재하지 않는 카테고리입니다.');
  const item = await (0, _mallItem.default)().create({
    name,
    price,
    description
  });
  const itemId = item.id;
  logger.info(`itemId: ${itemId}`);
  const itemCategory = await (0, _itemCategory.default)().findOne({
    where: {
      mallItemId: itemId,
      categoryId
    }
  });
  if (!itemCategory) {
    await (0, _itemCategory.default)().create({
      mallItemId: itemId,
      categoryId
    });
  }
  if (!file) throw new _httpError.BadRequest(_httpError.NO_DATA, '이미지 파일이 없습니다.');
  const fileName = file.filename;
  await item.update({
    image: fileName
  });
}
async function fetchItemList(param) {
  const {
    categoryId,
    page
  } = param;
  const where = {};
  if (categoryId) where.categoryId = categoryId;
  if (page) {
    where.offset = (page - 1) * 10;
    where.limit = 10;
  }
  const {
    count,
    rows
  } = await (0, _mallItem.default)().findAndCountAll({
    attributes: ['id', 'name', 'price', 'description', 'image'],
    where,
    orderBy: [['id', 'DESC']],
    include: {
      model: (0, _itemCategory.default)(),
      attributes: ['id'],
      include: {
        model: (0, _category.default)(),
        attributes: ['name']
      }
    }
  });
  const items = rows.map(row => {
    row.image = row.image ? `https://api.mybebe.net/uploads/images/${row.image}` : null;
    return row;
  });
  return {
    count,
    items
  };
}
async function fetchCategoryList() {
  return (0, _category.default)().findAll({
    attributes: ['id', 'name']
  });
}
async function fetchItemDetail(id) {
  const item = await (0, _mallItem.default)().findOne({
    where: {
      id
    },
    include: {
      model: (0, _itemCategory.default)(),
      attributes: ['id'],
      include: {
        model: (0, _category.default)(),
        attributes: ['name']
      }
    }
  });
  if (!item) throw new _httpError.BadRequest(_httpError.NO_DATA, '존재하지 않는 상품입니다.');
  item.image = item.image ? `https://api.mybebe.net/uploads/images/${item.image}` : null;
  return item;
}
async function modifyItem(param) {
  const {
    id
  } = param;
  const item = await (0, _mallItem.default)().findOne({
    where: {
      id
    }
  });
  if (!item) throw new _httpError.BadRequest(_httpError.NO_DATA, '존재하지 않는 상품입니다.');
  await item.update({
    ...param
  });
  const itemCategory = await (0, _itemCategory.default)().findOne({
    where: {
      mallItemId: id
    }
  });
  await itemCategory.update({
    categoryId: param.categoryId
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,