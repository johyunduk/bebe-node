"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadBabyList = loadBabyList;
exports.modifyBaby = modifyBaby;
exports.removeBaby = removeBaby;
exports.saveBaby = saveBaby;
exports.saveBabyFace = saveBabyFace;
var _userBaby = _interopRequireDefault(require("@global-common/db/model/user-baby"));
var _httpError = require("@global-common/error/http-error");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
async function loadBabyList(userId) {
  const list = await (0, _userBaby.default)().findAll({
    where: {
      userId
    },
    order: [['id', 'DESC']],
    raw: true
  });
  return list.map(baby => {
    return {
      ...baby,
      face: baby.face ? `https://api.mybebe.net/uploads/images/${baby.face}` : null
    };
  });
}
async function saveBaby(params, userId) {
  const baby = (0, _userBaby.default)().findOne({
    where: {
      userId
    }
  });
  if (baby) throw new _httpError.BadRequest(_httpError.INVALID_REQUEST, '이미 등록된 아이가 있습니다.');
  await (0, _userBaby.default)().create({
    ...params,
    userId
  });
}
async function modifyBaby(params, id) {
  const baby = await (0, _userBaby.default)().findOne({
    where: {
      id
    }
  });
  if (!baby) throw new _httpError.BadRequest(_httpError.NO_DATA, '해당 아이가 없습니다.');
  await baby.update(params);
}
async function removeBaby(id) {
  await (0, _userBaby.default)().destroy({
    where: {
      id
    }
  });
}
async function saveBabyFace(userId, babyId, file) {
  const baby = await (0, _userBaby.default)().findOne({
    where: {
      id: babyId
    }
  });
  if (!baby) throw new _httpError.BadRequest(_httpError.NO_DATA, '해당 아이가 없습니다.');
  const fileName = file.filename;
  await baby.update({
    face: fileName
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2FkQmFieUxpc3QiLCJ1c2VySWQiLCJsaXN0IiwiVXNlckJhYnkiLCJmaW5kQWxsIiwid2hlcmUiLCJvcmRlciIsInJhdyIsIm1hcCIsImJhYnkiLCJmYWNlIiwic2F2ZUJhYnkiLCJwYXJhbXMiLCJmaW5kT25lIiwiQmFkUmVxdWVzdCIsIklOVkFMSURfUkVRVUVTVCIsImNyZWF0ZSIsIm1vZGlmeUJhYnkiLCJpZCIsIk5PX0RBVEEiLCJ1cGRhdGUiLCJyZW1vdmVCYWJ5IiwiZGVzdHJveSIsInNhdmVCYWJ5RmFjZSIsImJhYnlJZCIsImZpbGUiLCJmaWxlTmFtZSIsImZpbGVuYW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RpYXJ5LXNlcnZlci9jb250cm9sbGVyL2JhYnktY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVXNlckJhYnkgZnJvbSAnQGdsb2JhbC1jb21tb24vZGIvbW9kZWwvdXNlci1iYWJ5J1xyXG5pbXBvcnQgeyBCYWRSZXF1ZXN0LCBJTlZBTElEX1JFUVVFU1QsIE5PX0RBVEEgfSBmcm9tICdAZ2xvYmFsLWNvbW1vbi9lcnJvci9odHRwLWVycm9yJ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRCYWJ5TGlzdCAodXNlcklkOiBudW1iZXIpIHtcclxuICBjb25zdCBsaXN0ID0gYXdhaXQgVXNlckJhYnkoKS5maW5kQWxsKHtcclxuICAgIHdoZXJlOiB7XHJcbiAgICAgIHVzZXJJZCxcclxuICAgIH0sXHJcbiAgICBvcmRlcjogW1snaWQnLCAnREVTQyddXSxcclxuICAgIHJhdzogdHJ1ZSxcclxuICB9KVxyXG5cclxuICByZXR1cm4gbGlzdC5tYXAoYmFieSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5iYWJ5LFxyXG4gICAgICBmYWNlOiBiYWJ5LmZhY2UgPyBgaHR0cHM6Ly9hcGkubXliZWJlLm5ldC91cGxvYWRzL2ltYWdlcy8ke2JhYnkuZmFjZX1gIDogbnVsbCxcclxuICAgIH1cclxuICB9KVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUJhYnkgKHBhcmFtcywgdXNlcklkKSB7XHJcbiAgY29uc3QgYmFieSA9IFVzZXJCYWJ5KCkuZmluZE9uZSh7IHdoZXJlOiB7IHVzZXJJZCB9IH0pXHJcblxyXG4gIGlmIChiYWJ5KSB0aHJvdyBuZXcgQmFkUmVxdWVzdChJTlZBTElEX1JFUVVFU1QsICfsnbTrr7gg65Ox66Gd65CcIOyVhOydtOqwgCDsnojsirXri4jri6QuJylcclxuXHJcbiAgYXdhaXQgVXNlckJhYnkoKS5jcmVhdGUoe1xyXG4gICAgLi4ucGFyYW1zLFxyXG4gICAgdXNlcklkLFxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtb2RpZnlCYWJ5IChwYXJhbXMsIGlkKSB7XHJcbiAgY29uc3QgYmFieSA9IGF3YWl0IFVzZXJCYWJ5KCkuZmluZE9uZSh7IHdoZXJlOiB7IGlkIH0gfSlcclxuXHJcbiAgaWYgKCFiYWJ5KSB0aHJvdyBuZXcgQmFkUmVxdWVzdChOT19EQVRBLCAn7ZW064u5IOyVhOydtOqwgCDsl4bsirXri4jri6QuJylcclxuXHJcbiAgYXdhaXQgYmFieS51cGRhdGUocGFyYW1zKVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlQmFieSAoaWQpIHtcclxuICBhd2FpdCBVc2VyQmFieSgpLmRlc3Ryb3koe1xyXG4gICAgd2hlcmU6IHtcclxuICAgICAgaWQsXHJcbiAgICB9LFxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlQmFieUZhY2UgKHVzZXJJZCwgYmFieUlkLCBmaWxlKSB7XHJcbiAgY29uc3QgYmFieSA9IGF3YWl0IFVzZXJCYWJ5KCkuZmluZE9uZSh7IHdoZXJlOiB7IGlkOiBiYWJ5SWQgfSB9KVxyXG5cclxuICBpZiAoIWJhYnkpIHRocm93IG5ldyBCYWRSZXF1ZXN0KE5PX0RBVEEsICftlbTri7kg7JWE7J206rCAIOyXhuyKteuLiOuLpC4nKVxyXG5cclxuICBjb25zdCBmaWxlTmFtZSA9IGZpbGUuZmlsZW5hbWVcclxuXHJcbiAgYXdhaXQgYmFieS51cGRhdGUoeyBmYWNlOiBmaWxlTmFtZSB9KVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFBc0Y7QUFFL0UsZUFBZUEsWUFBWSxDQUFFQyxNQUFjLEVBQUU7RUFDbEQsTUFBTUMsSUFBSSxHQUFHLE1BQU0sSUFBQUMsaUJBQVEsR0FBRSxDQUFDQyxPQUFPLENBQUM7SUFDcENDLEtBQUssRUFBRTtNQUNMSjtJQUNGLENBQUM7SUFDREssS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkJDLEdBQUcsRUFBRTtFQUNQLENBQUMsQ0FBQztFQUVGLE9BQU9MLElBQUksQ0FBQ00sR0FBRyxDQUFDQyxJQUFJLElBQUk7SUFDdEIsT0FBTztNQUNMLEdBQUdBLElBQUk7TUFDUEMsSUFBSSxFQUFFRCxJQUFJLENBQUNDLElBQUksR0FBSSx5Q0FBd0NELElBQUksQ0FBQ0MsSUFBSyxFQUFDLEdBQUc7SUFDM0UsQ0FBQztFQUNILENBQUMsQ0FBQztBQUNKO0FBRU8sZUFBZUMsUUFBUSxDQUFFQyxNQUFNLEVBQUVYLE1BQU0sRUFBRTtFQUM5QyxNQUFNUSxJQUFJLEdBQUcsSUFBQU4saUJBQVEsR0FBRSxDQUFDVSxPQUFPLENBQUM7SUFBRVIsS0FBSyxFQUFFO01BQUVKO0lBQU87RUFBRSxDQUFDLENBQUM7RUFFdEQsSUFBSVEsSUFBSSxFQUFFLE1BQU0sSUFBSUsscUJBQVUsQ0FBQ0MsMEJBQWUsRUFBRSxrQkFBa0IsQ0FBQztFQUVuRSxNQUFNLElBQUFaLGlCQUFRLEdBQUUsQ0FBQ2EsTUFBTSxDQUFDO0lBQ3RCLEdBQUdKLE1BQU07SUFDVFg7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVPLGVBQWVnQixVQUFVLENBQUVMLE1BQU0sRUFBRU0sRUFBRSxFQUFFO0VBQzVDLE1BQU1ULElBQUksR0FBRyxNQUFNLElBQUFOLGlCQUFRLEdBQUUsQ0FBQ1UsT0FBTyxDQUFDO0lBQUVSLEtBQUssRUFBRTtNQUFFYTtJQUFHO0VBQUUsQ0FBQyxDQUFDO0VBRXhELElBQUksQ0FBQ1QsSUFBSSxFQUFFLE1BQU0sSUFBSUsscUJBQVUsQ0FBQ0ssa0JBQU8sRUFBRSxjQUFjLENBQUM7RUFFeEQsTUFBTVYsSUFBSSxDQUFDVyxNQUFNLENBQUNSLE1BQU0sQ0FBQztBQUMzQjtBQUVPLGVBQWVTLFVBQVUsQ0FBRUgsRUFBRSxFQUFFO0VBQ3BDLE1BQU0sSUFBQWYsaUJBQVEsR0FBRSxDQUFDbUIsT0FBTyxDQUFDO0lBQ3ZCakIsS0FBSyxFQUFFO01BQ0xhO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVPLGVBQWVLLFlBQVksQ0FBRXRCLE1BQU0sRUFBRXVCLE1BQU0sRUFBRUMsSUFBSSxFQUFFO0VBQ3hELE1BQU1oQixJQUFJLEdBQUcsTUFBTSxJQUFBTixpQkFBUSxHQUFFLENBQUNVLE9BQU8sQ0FBQztJQUFFUixLQUFLLEVBQUU7TUFBRWEsRUFBRSxFQUFFTTtJQUFPO0VBQUUsQ0FBQyxDQUFDO0VBRWhFLElBQUksQ0FBQ2YsSUFBSSxFQUFFLE1BQU0sSUFBSUsscUJBQVUsQ0FBQ0ssa0JBQU8sRUFBRSxjQUFjLENBQUM7RUFFeEQsTUFBTU8sUUFBUSxHQUFHRCxJQUFJLENBQUNFLFFBQVE7RUFFOUIsTUFBTWxCLElBQUksQ0FBQ1csTUFBTSxDQUFDO0lBQUVWLElBQUksRUFBRWdCO0VBQVMsQ0FBQyxDQUFDO0FBQ3ZDIn0=