"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.destroyDiary = destroyDiary;
exports.loadDiaryDetail = loadDiaryDetail;
exports.loadDiaryList = loadDiaryList;
exports.saveDiary = saveDiary;
exports.updateDiary = updateDiary;
var _diary = _interopRequireDefault(require("@global-common/db/model/diary"));
var _httpError = require("@global-common/error/http-error");
var _user = _interopRequireDefault(require("@global-common/db/model/user"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
async function loadDiaryList(userId) {
  return await (0, _diary.default)().findAll({
    where: {
      userId
    }
  });
}
async function loadDiaryDetail(id, userId) {
  const diary = await (0, _diary.default)().findOne({
    where: {
      id,
      userId
    }
  });
  if (!diary) throw new _httpError.NotFound(_httpError.NO_RESOURCE, '존재하지 않는 일기입니다.');
  return diary;
}
async function saveDiary(body, userId) {
  const user = await (0, _user.default)().findOne({
    where: {
      id: userId
    }
  });
  if (!user) throw new _httpError.NotFound(_httpError.NO_USER, '사용자가 없습니다.');
  await (0, _diary.default)().create({
    ...body,
    userId
  });
}
async function updateDiary(body, userId, diaryId) {
  const diary = await (0, _diary.default)().findOne({
    where: {
      userId,
      id: diaryId
    }
  });
  if (!diary) throw new _httpError.NotFound(_httpError.NO_RESOURCE, '존재하지 않는 일기입니다.');
  await diary.update({
    ...body
  });
}
async function destroyDiary(userId, diaryId) {
  const diary = await (0, _diary.default)().findOne({
    where: {
      userId,
      id: diaryId
    }
  });
  if (!diary) throw new _httpError.NotFound(_httpError.NO_RESOURCE, '존재하지 않는 일기이비니다.');
  await diary.destroy();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2FkRGlhcnlMaXN0IiwidXNlcklkIiwiRGlhcnkiLCJmaW5kQWxsIiwid2hlcmUiLCJsb2FkRGlhcnlEZXRhaWwiLCJpZCIsImRpYXJ5IiwiZmluZE9uZSIsIk5vdEZvdW5kIiwiTk9fUkVTT1VSQ0UiLCJzYXZlRGlhcnkiLCJib2R5IiwidXNlciIsIlVzZXIiLCJOT19VU0VSIiwiY3JlYXRlIiwidXBkYXRlRGlhcnkiLCJkaWFyeUlkIiwidXBkYXRlIiwiZGVzdHJveURpYXJ5IiwiZGVzdHJveSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFyeS1zZXJ2ZXIvY29udHJvbGxlci9kaWFyeS1jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWFyeSBmcm9tICdAZ2xvYmFsLWNvbW1vbi9kYi9tb2RlbC9kaWFyeSdcclxuaW1wb3J0IHsgTk9fUkVTT1VSQ0UsIE5PX1VTRVIsIE5vdEZvdW5kIH0gZnJvbSAnQGdsb2JhbC1jb21tb24vZXJyb3IvaHR0cC1lcnJvcidcclxuaW1wb3J0IFVzZXIgZnJvbSAnQGdsb2JhbC1jb21tb24vZGIvbW9kZWwvdXNlcidcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkRGlhcnlMaXN0ICh1c2VySWQ6IG51bWJlcikge1xyXG4gIHJldHVybiBhd2FpdCBEaWFyeSgpLmZpbmRBbGwoeyB3aGVyZTogeyB1c2VySWQgfSB9KVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZERpYXJ5RGV0YWlsIChpZDpudW1iZXIsIHVzZXJJZCkge1xyXG4gIGNvbnN0IGRpYXJ5ID0gYXdhaXQgRGlhcnkoKS5maW5kT25lKHsgd2hlcmU6IHsgaWQsIHVzZXJJZCB9IH0pXHJcblxyXG4gIGlmICghZGlhcnkpIHRocm93IG5ldyBOb3RGb3VuZChOT19SRVNPVVJDRSwgJ+yhtOyerO2VmOyngCDslYrripQg7J286riw7J6F64uI64ukLicpXHJcblxyXG4gIHJldHVybiBkaWFyeVxyXG59XHJcblxyXG5pbnRlcmZhY2UgRGlhcnlJbnB1dHMge1xyXG4gIHRpdGxlOiBzdHJpbmdcclxuICBjb250ZW50OiBzdHJpbmdcclxuICB3ZWlnaHQ6IG51bWJlclxyXG4gIGhlaWdodDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlRGlhcnkgKGJvZHk6IERpYXJ5SW5wdXRzLCB1c2VySWQ6IG51bWJlcikge1xyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyKCkuZmluZE9uZSh7IHdoZXJlOiB7IGlkOiB1c2VySWQgfSB9KVxyXG5cclxuICBpZiAoIXVzZXIpIHRocm93IG5ldyBOb3RGb3VuZChOT19VU0VSLCAn7IKs7Jqp7J6Q6rCAIOyXhuyKteuLiOuLpC4nKVxyXG5cclxuICBhd2FpdCBEaWFyeSgpLmNyZWF0ZSh7IC4uLmJvZHksIHVzZXJJZCB9KVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlRGlhcnkgKGJvZHksIHVzZXJJZCwgZGlhcnlJZCkge1xyXG4gIGNvbnN0IGRpYXJ5ID0gYXdhaXQgRGlhcnkoKS5maW5kT25lKHsgd2hlcmU6IHsgdXNlcklkLCBpZDogZGlhcnlJZCB9IH0pXHJcblxyXG4gIGlmICghZGlhcnkpIHRocm93IG5ldyBOb3RGb3VuZChOT19SRVNPVVJDRSwgJ+yhtOyerO2VmOyngCDslYrripQg7J286riw7J6F64uI64ukLicpXHJcblxyXG4gIGF3YWl0IGRpYXJ5LnVwZGF0ZSh7IC4uLmJvZHkgfSlcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlc3Ryb3lEaWFyeSAodXNlcklkLCBkaWFyeUlkKSB7XHJcbiAgY29uc3QgZGlhcnkgPSBhd2FpdCBEaWFyeSgpLmZpbmRPbmUoeyB3aGVyZTogeyB1c2VySWQsIGlkOiBkaWFyeUlkIH0gfSlcclxuXHJcbiAgaWYgKCFkaWFyeSkgdGhyb3cgbmV3IE5vdEZvdW5kKE5PX1JFU09VUkNFLCAn7KG07J6s7ZWY7KeAIOyViuuKlCDsnbzquLDsnbTruYTri4jri6QuJylcclxuXHJcbiAgYXdhaXQgZGlhcnkuZGVzdHJveSgpXHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQStDO0FBRXhDLGVBQWVBLGFBQWEsQ0FBRUMsTUFBYyxFQUFFO0VBQ25ELE9BQU8sTUFBTSxJQUFBQyxjQUFLLEdBQUUsQ0FBQ0MsT0FBTyxDQUFDO0lBQUVDLEtBQUssRUFBRTtNQUFFSDtJQUFPO0VBQUUsQ0FBQyxDQUFDO0FBQ3JEO0FBRU8sZUFBZUksZUFBZSxDQUFFQyxFQUFTLEVBQUVMLE1BQU0sRUFBRTtFQUN4RCxNQUFNTSxLQUFLLEdBQUcsTUFBTSxJQUFBTCxjQUFLLEdBQUUsQ0FBQ00sT0FBTyxDQUFDO0lBQUVKLEtBQUssRUFBRTtNQUFFRSxFQUFFO01BQUVMO0lBQU87RUFBRSxDQUFDLENBQUM7RUFFOUQsSUFBSSxDQUFDTSxLQUFLLEVBQUUsTUFBTSxJQUFJRSxtQkFBUSxDQUFDQyxzQkFBVyxFQUFFLGdCQUFnQixDQUFDO0VBRTdELE9BQU9ILEtBQUs7QUFDZDtBQVNPLGVBQWVJLFNBQVMsQ0FBRUMsSUFBaUIsRUFBRVgsTUFBYyxFQUFFO0VBQ2xFLE1BQU1ZLElBQUksR0FBRyxNQUFNLElBQUFDLGFBQUksR0FBRSxDQUFDTixPQUFPLENBQUM7SUFBRUosS0FBSyxFQUFFO01BQUVFLEVBQUUsRUFBRUw7SUFBTztFQUFFLENBQUMsQ0FBQztFQUU1RCxJQUFJLENBQUNZLElBQUksRUFBRSxNQUFNLElBQUlKLG1CQUFRLENBQUNNLGtCQUFPLEVBQUUsWUFBWSxDQUFDO0VBRXBELE1BQU0sSUFBQWIsY0FBSyxHQUFFLENBQUNjLE1BQU0sQ0FBQztJQUFFLEdBQUdKLElBQUk7SUFBRVg7RUFBTyxDQUFDLENBQUM7QUFDM0M7QUFFTyxlQUFlZ0IsV0FBVyxDQUFFTCxJQUFJLEVBQUVYLE1BQU0sRUFBRWlCLE9BQU8sRUFBRTtFQUN4RCxNQUFNWCxLQUFLLEdBQUcsTUFBTSxJQUFBTCxjQUFLLEdBQUUsQ0FBQ00sT0FBTyxDQUFDO0lBQUVKLEtBQUssRUFBRTtNQUFFSCxNQUFNO01BQUVLLEVBQUUsRUFBRVk7SUFBUTtFQUFFLENBQUMsQ0FBQztFQUV2RSxJQUFJLENBQUNYLEtBQUssRUFBRSxNQUFNLElBQUlFLG1CQUFRLENBQUNDLHNCQUFXLEVBQUUsZ0JBQWdCLENBQUM7RUFFN0QsTUFBTUgsS0FBSyxDQUFDWSxNQUFNLENBQUM7SUFBRSxHQUFHUDtFQUFLLENBQUMsQ0FBQztBQUNqQztBQUVPLGVBQWVRLFlBQVksQ0FBRW5CLE1BQU0sRUFBRWlCLE9BQU8sRUFBRTtFQUNuRCxNQUFNWCxLQUFLLEdBQUcsTUFBTSxJQUFBTCxjQUFLLEdBQUUsQ0FBQ00sT0FBTyxDQUFDO0lBQUVKLEtBQUssRUFBRTtNQUFFSCxNQUFNO01BQUVLLEVBQUUsRUFBRVk7SUFBUTtFQUFFLENBQUMsQ0FBQztFQUV2RSxJQUFJLENBQUNYLEtBQUssRUFBRSxNQUFNLElBQUlFLG1CQUFRLENBQUNDLHNCQUFXLEVBQUUsaUJBQWlCLENBQUM7RUFFOUQsTUFBTUgsS0FBSyxDQUFDYyxPQUFPLEVBQUU7QUFDdkIifQ==